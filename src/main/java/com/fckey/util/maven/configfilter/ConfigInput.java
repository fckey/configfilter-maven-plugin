package com.fckey.util.maven.configfilter;


import org.codehaus.plexus.interpolation.InterpolationException;
import org.codehaus.plexus.interpolation.Interpolator;
import org.codehaus.plexus.util.DirectoryScanner;
import org.codehaus.plexus.util.FileUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

/**
 * Created by fckey on 2016/04/09.
 */
public class ConfigInput {
    private ConfigDefinition def;
    private File inputDir;
    private String overrideDirName;
    public ConfigInput(ConfigDefinition def, File inputDir, String overrideDirName) {
        this.def = def;
        this.inputDir = inputDir;
        this.overrideDirName = overrideDirName;
    }

    public void mergeWithConfig(EnvironmentConfig conf, File outputDir) throws Exception {
        Interpolator interpolator = conf.getInterpolator();
        File envOutputDir = conf.getOutputDirectory(outputDir);
        envOutputDir.mkdirs();

        if (inputDir.exists()) {
            mergeDirectory(inputDir, envOutputDir, interpolator);
        }

        for (File overrideDir : conf.getOverrideDirectories(inputDir, overrideDirName)) {
            if (overrideDir.exists()) {
                mergeDirectory(outputDir, envOutputDir, interpolator);
            }
        }

        storeEnvProperties(conf.getProperties(def.isInterpolateEnvProperties()), envOutputDir);
    }

    private void storeEnvProperties(Properties confProperties, File envOputputDir) throws IOException {
        FileOutputStream out = new FileOutputStream(new File(envOputputDir, MergeConfigMojo.MERGED_ENV_PROPERTIES_FILE_NAME));
        confProperties.store(out, "GENERATED BY MAVEN-CONFIGFILTER-PLUGIN");
    }

    private void mergeDirectory(File inputDir, File outputDir, Interpolator interpolator) throws IOException, InterpolationException {
        if (!outputDir.exists()) {
            outputDir.mkdirs();
        }

        DirectoryScanner scanner = new DirectoryScanner();
        scanner.setBasedir(inputDir);
        scanner.setIncludes(new String[]{"**"});
        scanner.setExcludes(new String[]{overrideDirName + "/**"});
        scanner.addDefaultExcludes();
        scanner.scan();

        for (String dirName : scanner.getIncludedDirectories()) {
            new File(outputDir, dirName).mkdirs();
        }

        for (String fileName : scanner.getIncludedFiles()) {
            File file = new File(inputDir, fileName);
            String data = FileUtils.fileRead(file);
            FileUtils.fileWrite(
                    new File(outputDir, fileName).getAbsolutePath(),
                    interpolator.interpolate(data)
            );
        }
    }

}
